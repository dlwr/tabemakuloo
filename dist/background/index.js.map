{"version":3,"file":"index.js","sources":["../../src/services/base-service.ts","../../src/services/tumblr-service.ts","../../src/background/index.ts"],"sourcesContent":["import type {PostData, PostResult, PostTypeString} from '@/types'\n\nexport abstract class BaseService {\n  abstract readonly name: string\n\n  abstract authenticate(): Promise<boolean>\n  abstract post(data: PostData): Promise<PostResult>\n  abstract supports(type: PostTypeString): boolean\n\n  protected validatePostData(data: PostData): void {\n    if (!data.title?.trim()) {\n      throw new Error('Title is required')\n    }\n\n    if (!data.url?.trim()) {\n      throw new Error('URL is required')\n    }\n\n    try {\n      new URL(data.url)\n    } catch {\n      throw new Error('Invalid URL format')\n    }\n  }\n\n  protected createErrorResult(error: string): PostResult {\n    return {\n      service: this.name,\n      success: false,\n      error,\n    }\n  }\n\n  protected createSuccessResult(url?: string): PostResult {\n    return {\n      service: this.name,\n      success: true,\n      url,\n    }\n  }\n}\n","import {BaseService} from './base-service'\nimport type {PostData, PostResult, PostTypeString} from '@/types'\n\nexport class TumblrService extends BaseService {\n  readonly name = 'Tumblr'\n\n  async authenticate(): Promise<boolean> {\n    try {\n      const response = await fetch('https://www.tumblr.com/api/v2/user/info', {\n        credentials: 'include',\n      })\n      return response.ok\n    } catch {\n      return false\n    }\n  }\n\n  async post(data: PostData): Promise<PostResult> {\n    try {\n      this.validatePostData(data)\n\n      const formKey = await this.getFormKey()\n      const postType = this.detectPostType(data)\n      const postData = this.preparePostData(data, postType, formKey)\n\n      const response = await fetch('https://www.tumblr.com/svc/post/update', {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams(postData).toString(),\n      })\n\n      if (!response.ok) {\n        return this.createErrorResult('Failed to post to Tumblr')\n      }\n\n      const result = await response.json()\n      const postId = result.response?.id\n\n      return this.createSuccessResult(\n        postId ? `https://www.tumblr.com/posts/${postId}` : undefined,\n      )\n    } catch (error) {\n      return this.createErrorResult(\n        error instanceof Error ? error.message : 'Unknown error',\n      )\n    }\n  }\n\n  supports(type: PostTypeString): boolean {\n    return ['text', 'link', 'image', 'video', 'photo'].includes(type)\n  }\n\n  detectPostType(data: PostData): PostTypeString {\n    if (data.image) {\n      return 'photo'\n    }\n\n    if (data.url && data.url.trim() !== '') {\n      return 'link'\n    }\n\n    return 'text'\n  }\n\n  private async getFormKey(): Promise<string> {\n    const response = await fetch('https://www.tumblr.com/svc/secure/post_form_key', {\n      credentials: 'include',\n    })\n\n    if (!response.ok) {\n      throw new Error('Failed to get form key')\n    }\n\n    const data = await response.json()\n    return data.response.form_key\n  }\n\n  private preparePostData(\n    data: PostData,\n    postType: PostTypeString,\n    formKey: string,\n  ): Record<string, string> {\n    const baseData = {\n      form_key: formKey,\n      post_type: postType,\n      channel_id: 'main',\n      context: 'channel',\n      tags: data.tags?.join(',') ?? '',\n    }\n\n    switch (postType) {\n      case 'text': {\n        return {\n          ...baseData,\n          'post[one]': data.title,\n          'post[two]': data.description ?? '',\n        }\n      }\n\n      case 'link': {\n        return {\n          ...baseData,\n          'post[one]': data.url,\n          'post[two]': data.title,\n          'post[three]': data.description ?? '',\n        }\n      }\n\n      case 'photo': {\n        return {\n          ...baseData,\n          'post[photoset_layout]': '',\n          'post[one]': data.image ?? '',\n          'post[two]': data.description ?? '',\n        }\n      }\n\n      default: {\n        return baseData\n      }\n    }\n  }\n}\n","import browser from 'webextension-polyfill'\nimport {TumblrService} from '@/services/tumblr-service'\nimport type {ContextMenuInfo, PostData, PostResult} from '@/types'\n\nclass BackgroundService {\n  private readonly tumblrService: TumblrService\n\n  constructor() {\n    this.tumblrService = new TumblrService()\n    this.init()\n  }\n\n  private init(): void {\n    this.setupContextMenus()\n    this.setupEventListeners()\n  }\n\n  private setupContextMenus(): void {\n    browser.contextMenus.create({\n      id: 'post-link',\n      title: 'Tabemakulooで投稿',\n      contexts: ['link', 'selection', 'page'],\n    })\n  }\n\n  private setupEventListeners(): void {\n    browser.contextMenus.onClicked.addListener(this.handleContextMenuClick.bind(this))\n    browser.runtime.onMessage.addListener(this.handleMessage.bind(this))\n  }\n\n  private async handleContextMenuClick(info: ContextMenuInfo): Promise<void> {\n    const tabs = await browser.tabs.query({active: true, currentWindow: true})\n    const tab = tabs[0]\n\n    if (!tab?.id) {\n      return\n    }\n\n    await browser.tabs.sendMessage(tab.id, {\n      type: 'CONTEXT_MENU_CLICK',\n      data: info,\n    })\n  }\n\n  private async handleMessage(message: unknown): Promise<unknown> {\n    try {\n      const message_ = message as {type: string; data?: unknown}\n\n      switch (message_.type) {\n        case 'POST_TO_SERVICES': {\n          return await this.handlePostToServices(message_.data as {postData: PostData; services: string[]})\n        }\n\n        case 'CHECK_AUTH': {\n          return await this.handleCheckAuth(message_.data as {service: string})\n        }\n\n        default: {\n          console.log('Unknown message type:', message_.type)\n          return {success: false, error: 'Unknown message type'}\n        }\n      }\n    } catch (error) {\n      console.error('Background message handler error:', error)\n      return {success: false, error: 'Internal error'}\n    }\n  }\n\n  private async handlePostToServices(data: {postData: PostData; services: string[]}): Promise<{results: PostResult[]}> {\n    const {postData, services} = data\n    const results: PostResult[] = []\n\n    // For now, only handle Tumblr\n    if (services.includes('tumblr')) {\n      try {\n        const result = await this.tumblrService.post(postData)\n        results.push(result)\n      } catch (error) {\n        results.push({\n          service: 'Tumblr',\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        })\n      }\n    }\n\n    return {results}\n  }\n\n  private async handleCheckAuth(data: {service: string}): Promise<{authenticated: boolean}> {\n    const {service} = data\n\n    if (service === 'tumblr') {\n      const authenticated = await this.tumblrService.authenticate()\n      return {authenticated}\n    }\n\n    return {authenticated: false}\n  }\n}\n\nvoid new BackgroundService()\n"],"names":["BaseService","data","_a","_b","error","url","TumblrService","__publicField","formKey","postType","postData","response","postId","type","baseData","BackgroundService","browser","info","tab","message","message_","services","results","result","service"],"mappings":"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"}